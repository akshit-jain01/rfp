#include <iostream>
#include <vector>
#include <queue>
using namespace std;
// int canBeRotten(vector<vector<int>>& grid){
//     int n = grid.size();
//     int m = grid[0].size();
//     queue <pair<pair<int, int>, int>> q;
//     vector<vector<int>> visited(n, vector<int>(m, 0));
//     for(int i = 0;i<n;i++){
//         for(int j = 0;j<m;j++){
//             if(grid[i][j]==2){
//                 visited[i][j] = 2;
//                 q.push({{i,j},0});
//             }
//         }
//     }
//     int max_lvl = 0;
//     int dir_row[] = {-1, 0, 1, 0};
//     int dir_col[] = {0, 1, 0, -1};
//     while(!q.empty()){
//         int r = q.front().first.first;
//         int c = q.front().first.second;
//         int lvl = q.front().second;
//         max_lvl = max(lvl, max_lvl);
//         q.pop();
//         for(int i = 0;i<4;i++){
//             int nr = r+dir_row[i];
//             int nc = c+dir_col[i];
//             if(nr>=0&&nc>=0&&nr<n&&nc<m && grid[nr][nc]==1 && visited[nr][nc] != 2){
//                 visited[nr][nc] = 2;
//                 q.push({{nr, nc}, lvl+1});
//             }
//         }
//     }
//     for(int i = 0;i<n;i++){
//         for(int j = 0;j<m;j++){
//             if(visited[i][j]!=2&&grid[i][j]==1){
//                 return -1;
//             }
//         }
//     }
//     return max_lvl;

// }
void bfsMark(int r, int c, vector<vector<char>>& board, vector<vector<int>>& visited) {
    int n = board.size();
    int m = board[0].size();
    queue<pair<int,int>> q;
    q.push({r, c});
    visited[r][c] = 1;

    int dr[4] = {-1, 0, 1, 0};
    int dc[4] = {0, 1, 0, -1};

    while(!q.empty()) {
        auto [x, y] = q.front();
        q.pop();

        for(int i = 0; i < 4; i++) {
            int nx = x + dr[i];
            int ny = y + dc[i];

            if(nx >= 0 && ny >= 0 && nx < n && ny < m &&
               board[nx][ny] == 'O' && !visited[nx][ny]) {
                visited[nx][ny] = 1;
                q.push({nx, ny});
            }
        }
    }
}

void captureRegions(vector<vector<char>>& board) {
    int n = board.size();
    if(n == 0) return;
    int m = board[0].size();

    vector<vector<int>> visited(n, vector<int>(m, 0));
    for(int i = 0; i < n; i++) {
        if(board[i][0] == 'O' && !visited[i][0]) bfsMark(i, 0, board, visited);
        if(board[i][m-1] == 'O' && !visited[i][m-1]) bfsMark(i, m-1, board, visited);
    }
    for(int j = 0; j < m; j++) {
        if(board[0][j] == 'O' && !visited[0][j]) bfsMark(0, j, board, visited);
        if(board[n-1][j] == 'O' && !visited[n-1][j]) bfsMark(n-1, j, board, visited);
    }

    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            if(board[i][j] == 'O' && !visited[i][j]) {
                board[i][j] = 'X';
            }
        }
    }
}

int main() {
    int n, m;
    cin >> n >> m;

    vector<vector<char>> board(n, vector<char>(m));
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cin >> board[i][j];
        }
    }

    captureRegions(board);

    
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cout << board[i][j] << " ";
        }
        cout << "\n";
    }
    return 0;
}
